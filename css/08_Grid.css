

/* =========== Grid Layout (Defining rows and columns, Placing items in a grid) ==================
The CSS Grid Layout is a powerful tool for creating two-dimensional layouts on the web. Unlike Flexbox, which is designed for one-dimensional layouts (either a row or a column), Grid allows you to create complex layouts with rows and columns simultaneously.



1. Defining a Grid Container: 
    To create a grid layout, you first define a grid container. This is done by applying 'display: grid;' to the container element.

        .grid-container{
                display: grid;
                grid-template-columns: repeate(3,1fr); // three equal-width column
                grid-template-rows: auto; // rows will adjust height based on content 
                gap: 10px;
            }

        
2. Defining Rows and Columns: 

    * grid-template-columns: Defines the number and width of the columns.
    * grid-template-rows: Defines the number and height of the rows. 

    Example: 

        .grid-container {
            display: grid;
            grid-template-columns: 100px 200px 100px; // three columns with specific widths
            grid-template-rows: 50px 100px; // two rows with specific heights
            gap: 10px;  // space between items
        }

    Explanation: 

        * The grid will have three columns: the first column is 100px wide, the second column is 200px wide, and the third column is 100px wide.
        * The grid will have two rows: the first row is 50px tall, and the second row is 100px tall.
        * gap: 10px; adds 10px of space between each grid item.



3. Placing Items in a Grid: 
    you can place items in specific grid cells using the 'grid-column' and 'grid-row' properties.
    
    * 'grid-column': Specifies the starting and ending column for a grid item.
    * 'grid-row': Specifies the starting and ending row for a grid item. 

    Example of Placing Items: 

        .grid-item-1{
            grid-column: 1 / 3; // span from column 1 to 3
            grid-row: 1 / 2; // span from row 1 to 2 
        }

        .grid-item-2{
            grid-column: 2 / 4; // span from column 2 to 4
            grid-row: 2 / 3; // span from row 2 to 3
        }

    Explanation: 
        * '.grid-item-1' span from the first to the third column and from the first to the second row. 
        * '.grid-item-2' spans from the secondto the fourth column and from the second to the third row. 

Example: 

    <head>
        <style>
            .grid-container{
                display: grid;
                grid-template-column: 100px 200px 100px; // define three columns 
                grid-template-rows: 50px 100px; // define two rows 
                gap: 10px; // space between items 
                background-color: lightgray;
                padding: 10px;
            }

            .grid-item{
                background-color: cornflowerblue; 
                padding: 20px;
                color: white; 
                text-align: center;
            }

            .grid-item-1{
                grid-column: 1 / 3; //span across two columns
                grid-row: 1 / 2; Occupy the first row 
            }

            .grid-item-2{
                grid-column: 2 / 4; // span across two columns
                grid-row: 2 / 3; // Occupy the second row
            }

            .grid-item-3{
                grid-column: 2 / 4; // Occupy the first column
                grid-row: 2 / 3; // Occupy the second row 
            }

            .grid-item-4{
                grid-column: 3 / 4; // Occupy the third column
                grid-row: 1 / 3; // span across both rows
            }
        </style>
    </head>
    <body>
        <div class="grid-container">
            <div class="grid-item grid-item-1">Item 1</div>
            <div class="grid-item grid-item-2">Item 2</div>
            <div class="grid-item grid-item-3">Item 3</div>
            <div class="grid-item grid-item-4">Item 4</div>
        </div>
    </body>


Explanation of the Example:

Grid Container:
    The container is set to display: grid;, making it a grid layout.
    Three columns are defined: 100px, 200px, and 100px wide.
    Two rows are defined: 50px and 100px tall.
    A gap of 10px is added between grid items.
Grid Items:
    Item 1 (.grid-item-1): Spans from the first to the third column and occupies the first row.
    Item 2 (.grid-item-2): Spans from the second to the fourth column and occupies the second row.
    Item 3 (.grid-item-3): Occupies the first column of the second row.
    Item 4 (.grid-item-4): Occupies the third column and spans both rows.


































*/